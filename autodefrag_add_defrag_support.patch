ext4: add defrag support

This patch adds support for defragging a extent file by:

  -- adding BH_Auto_Defrag
     data blocks marked with BH_Auto_Defrag are reallocated to defrag
     the file containning the blocks.

  -- adding EXT4_GET_BLOCKS_AUTO_DEFRAG
     EXT4_GET_BLOCKS_AUTO_DEFRAG are passed to ext4_map_blocks() to indicate
     reallocating blocks for defraging.

  -- adding ext4_try_to_defrag()
     ext4_try_to_defrag() tries to defrag a file by reallocating blocks.

Signed-off-by: Yongqiang Yang <xiaoqiangnk@gmail.com>
diff --git a/fs/ext4/Makefile b/fs/ext4/Makefile
index 9981306..460f438 100644
--- a/fs/ext4/Makefile
+++ b/fs/ext4/Makefile
@@ -22,3 +22,4 @@ ext4-$(CONFIG_EXT4_FS_SECURITY)		+= xattr_security.o
 ext4-$(CONFIG_EXT4_FS_SNAPSHOT)		+= snapshot.o snapshot_ctl.o
 ext4-$(CONFIG_EXT4_FS_SNAPSHOT)		+= snapshot_inode.o snapshot_buffer.o
 ext4-$(CONFIG_EXT4_FS_SNAPSHOT)		+= snapshot_debug.o
+ext4-$(CONFIG_EXT4_FS_SNAPSHOT)		+= auto_defrag.o
diff --git a/fs/ext4/auto_defrag.c b/fs/ext4/auto_defrag.c
new file mode 100644
index 0000000..f4fb90c
--- /dev/null
+++ b/fs/ext4/auto_defrag.c
@@ -0,0 +1,20 @@
+/*
+ * linux/fs/ext4/auto_defrag.c
+ *
+ * Written by Yongqiang Yang <xiaoqiangnk@gmail.com>, 2011
+ *
+ * Copyright (C) 2011 Yongqiang Yang.
+ *
+ * This file is part of the Linux kernel and is made available under
+ * the terms of the GNU General Public License, version 2, or at your
+ * option, any later version, incorporated herein by reference.
+ *
+ * Ext4 auto-defag core functions.
+ */
+
+#include "ext4.h"
+#include "ext4_extents.h"
+#include "auto_defrag.h"
+#define CONFIG_EXT4_FS_AUTO_DEFRAG
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+#endif
diff --git a/fs/ext4/auto_defrag.h b/fs/ext4/auto_defrag.h
new file mode 100644
index 0000000..7bf108d
--- /dev/null
+++ b/fs/ext4/auto_defrag.h
@@ -0,0 +1,35 @@
+/*
+ * linux/fs/ext4/auto_defrag.h
+ *
+ * Written by Yongqiang Yang <xiaoqiangnk@gmail.com>, 2011
+ *
+ * Copyright (C) 2011 Yongqiang Yang
+ *
+ * This file is part of the Linux kernel and is made available under
+ * the terms of the GNU General Public License, version 2, or at your
+ * option, any later version, incorporated herein by reference.
+ *
+ * Ext4 auto-defrag extensions.
+ */
+
+#include "ext4.h"
+#include "snapshot.h"
+
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+
+/*
+ * check if @inode data blocks should be defragged.
+ */
+static inline int ext4_should_auto_defrag(struct inode *inode)
+{
+	if (!inode || !S_ISREG(inode->i_mode))
+		return 0;
+
+	if (ext4_snapshot_file(inode))
+		return 0;
+
+	if (!ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))
+		return 0;
+	return 1;
+}
+#endif
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 9ba5a38..17408433 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -82,10 +82,14 @@
 #define CONFIG_EXT4_FS_SNAPSHOT_CLEANUP
 #define CONFIG_EXT4_FS_SNAPSHOT_CLEANUP_SHRINK
 #define CONFIG_EXT4_FS_SNAPSHOT_CLEANUP_MERGE
+#define CONFIG_EXT4_FS_AUTO_DEFRAG
 #endif
 #ifndef CONFIG_EXT4_FS_SNAPSHOT_
 #define CONFIG_EXT4_FS_SNAPSHOT_
 #endif
+#ifndef CONFIG_EXT4_FS_AUTO_DEFRAG
+#define CONFIG_EXT4_FS_AUTO_DEFRAG
+#endif
 
 /*
  * The fourth extended filesystem constants/structures
@@ -655,7 +659,10 @@ struct ext4_new_group_data {
 	/* bypass journal and sync allocated indirect blocks directly to disk */
 #define EXT4_GET_BLOCKS_SYNC			0x800
 #endif
-
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	/* allocate blocks to defrag a file */
+#define EXT4_GET_BLOCKS_AUTO_DEFRAG		0x1000
+#endif
 /*
  * Flags used by ext4_free_blocks
  */
@@ -2438,6 +2445,9 @@ enum ext4_state_bits {
 				 */
 #endif
 #endif
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	BH_Auto_Defrag,	/* Data block need to be defragged */
+#endif
 };
 
 BUFFER_FNS(Uninit, uninit)
@@ -2449,6 +2459,9 @@ BUFFER_FNS(Partial_Write, partial_write)
 BUFFER_FNS(Tracked_Read, tracked_read)
 #endif
 #endif
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+BUFFER_FNS(Auto_Defrag, auto_defrag)
+#endif
 
 /*
  * Add new method to test wether block and inode bitmaps are properly
diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 8ab41ea..a01247e 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -46,6 +46,7 @@
 #include "ext4_jbd2.h"
 #include "ext4_extents.h"
 #include "snapshot.h"
+#include "auto_defrag.h"
 
 static int ext4_ext_truncate_extend_restart(handle_t *handle,
 					    struct inode *inode,
@@ -3212,6 +3213,89 @@ out:
 	return err;
 }
 #endif
+
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+/*
+ * This function tries to defrag a file by replacing the physical blocks of @ex
+ * with the physical blocks of @newex.
+ */
+int ext4_ext_try_to_defrag(handle_t *handle, struct inode *inode,
+				  struct ext4_ext_path *path,
+				  struct ext4_map_blocks *map,
+				  struct ext4_extent *ex,
+				  struct ext4_extent *newex)
+{
+	ext4_fsblk_t oldblock = 0;
+	int err = 0;
+	int ee_newlen, merge_len, ee_len, depth;
+
+	depth = ext_depth(inode);
+	ee_len = ext4_ext_get_actual_len(ex);
+	ee_newlen = ext4_ext_get_actual_len(newex);
+
+	/* determine the nr of blocks which can be replaced */
+	merge_len = min(ee_newlen, ee_len);
+
+	BUG_ON(merge_len <= 0 || ee_newlen > ee_len ||
+	       newex->ee_block != ex->ee_block);
+
+	if (merge_len == ee_len) {
+		err = ext4_ext_get_access(handle, inode, path + depth);
+		if (err)
+			goto free_blocks;
+		ext4_ext_store_pblock(ex, ext4_ext_pblock(newex));
+	} else {
+		oldblock = ext4_ext_pblock(ex);
+		err = ext4_split_extent(handle, inode, path, map, 0,
+					EXT4_GET_BLOCKS_PRE_IO);
+		if (err < 0)
+			goto free_blocks;
+		/* extent tree may be changed. */
+		depth = ext_depth(inode);
+		ext4_ext_drop_refs(path);
+		path = ext4_ext_find_extent(inode, map->m_lblk, path);
+		if (IS_ERR(path)) {
+			err = PTR_ERR(path);
+			goto free_blocks;
+		}
+
+		/* just verify splitting. */
+		ex = path[depth].p_ext;
+		BUG_ON(le32_to_cpu(ex->ee_block) != map->m_lblk ||
+		       ext4_ext_get_actual_len(ex) != map->m_len);
+
+		err = ext4_ext_get_access(handle, inode, path + depth);
+		if (err)
+			goto free_blocks;
+		if (!err) {
+			/* splice new blocks to the inode*/
+			ext4_ext_store_pblock(ex, ext4_ext_pblock(newex));
+			ext4_ext_try_to_merge(inode, path, ex);
+		}
+	}
+
+	if (!err) {
+		err = ext4_ext_dirty(handle, inode, path + depth);
+		if (err)
+			goto out;
+	}
+
+	if (oldblock)
+		ext4_free_blocks(handle, inode, NULL, oldblock,
+				 merge_len, EXT4_FREE_BLOCKS_FORGET);
+
+	ext4_std_error(inode->i_sb, err);
+out:
+	return err;
+
+free_blocks:
+	ext4_discard_preallocations(inode);
+	ext4_free_blocks(handle, inode, NULL, ext4_ext_pblock(newex),
+			       ee_newlen, 0);
+	return err;
+}
+#endif
+
 /*
  * Block allocation/map/preallocation routine for extents based files
  *
@@ -3397,6 +3481,10 @@ found:
 		ex = path[depth].p_ext;
 	}
 #endif
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (newblock && (flags & EXT4_GET_BLOCKS_AUTO_DEFRAG))
+		oldblock = newblock;
+#endif
 	/*
 	 * Okay, we need to do block allocation.
 	 */
@@ -3454,7 +3542,14 @@ found:
 	ar.logical = map->m_lblk;
 	ar.len = allocated;
 	if (S_ISREG(inode->i_mode))
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+		if (flags & EXT4_GET_BLOCKS_AUTO_DEFRAG)
+			ar.flags = EXT4_MB_HINT_DATA | EXT4_MB_HINT_GOAL_ONLY;
+		else
+			ar.flags = EXT4_MB_HINT_DATA;
+#else
 		ar.flags = EXT4_MB_HINT_DATA;
+#endif
 	else
 		/* disable in-core preallocation for non-regular files */
 		ar.flags = 0;
@@ -3496,9 +3591,20 @@ found:
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_EXTENT
 	if (oldblock) {
 		map->m_len = ar.len;
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+		BUG_ON(!(flags & (EXT4_GET_BLOCKS_MOVE_ON_WRITE |
+				  EXT4_GET_BLOCKS_AUTO_DEFRAG)));
+		if (flags & EXT4_GET_BLOCKS_MOVE_ON_WRITE)
+			err = ext4_ext_move_to_snapshot(handle, inode, map,
+				path, oldblock, newblock);
+		else
+			err = ext4_ext_try_to_defrag(handle, inode, path, map,
+						     ex, &newex);
+#else
 		BUG_ON(!(flags & EXT4_GET_BLOCKS_MOVE_ON_WRITE));
 		err = ext4_ext_move_to_snapshot(handle, inode, map, path,
 						oldblock, newblock);
+#endif
 	} else
 		err = ext4_ext_insert_extent(handle, inode,
 					     path, &newex, flags);
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 0ede8cc..93b8063 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -52,6 +52,7 @@
 
 #include <trace/events/ext4.h>
 #include "snapshot.h"
+#include "auto_defrag.h"
 
 #define MPAGE_DA_EXTENT_TAIL 0x01
 
@@ -1591,15 +1592,27 @@ int ext4_map_blocks(handle_t *handle, struct inode *inode,
 #endif
 	if (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS)) {
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_EXTENT
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+		retval = ext4_ext_map_blocks(handle, inode, map,
+				flags & (EXT4_GET_BLOCKS_MOVE_ON_WRITE |
+					 EXT4_GET_BLOCKS_AUTO_DEFRAG));
+#else
 		retval = ext4_ext_map_blocks(handle, inode, map,
 				flags & EXT4_GET_BLOCKS_MOVE_ON_WRITE);
+#endif
 #else
 		retval = ext4_ext_map_blocks(handle, inode, map, 0);
 #endif
 	} else {
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+		retval = ext4_ind_map_blocks(handle, inode, map,
+				flags & (EXT4_GET_BLOCKS_MOVE_ON_WRITE |
+					 EXT4_GET_BLOCKS_AUTO_DEFRAG));
+#else
 		retval = ext4_ind_map_blocks(handle, inode, map,
 				flags & EXT4_GET_BLOCKS_MOVE_ON_WRITE);
+#endif
 #else
 		retval = ext4_ind_map_blocks(handle, inode, map, 0);
 #endif
@@ -1636,8 +1649,14 @@ int ext4_map_blocks(handle_t *handle, struct inode *inode,
 	 * with buffer head unmapped.
 	 */
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (retval > 0 && map->m_flags & EXT4_MAP_MAPPED &&
+	    !(map->m_flags & EXT4_MAP_REMAP) &&
+	    !(map->m_flags & EXT4_MAP_AUTO_DEFRAG))
+#else
 	if (retval > 0 && map->m_flags & EXT4_MAP_MAPPED &&
 		!(map->m_flags & EXT4_MAP_REMAP))
+#endif
 #else
 	if (retval > 0 && map->m_flags & EXT4_MAP_MAPPED)
 #endif
@@ -1829,6 +1848,10 @@ int ext4_get_block_mow(struct inode *inode, sector_t iblock,
 
 	if (ext4_snapshot_should_move_data(inode))
 		flags |= EXT4_GET_BLOCKS_MOVE_ON_WRITE;
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (ext4_should_auto_defrag(inode))
+		flags |= EXT4_GET_BLOCKS_AUTO_DEFRAG;
+#endif
 	return _ext4_get_block(inode, iblock, bh, flags);
 }
 
@@ -2067,6 +2090,36 @@ static void ext4_snapshot_write_begin(struct inode *inode,
 }
 
 #endif
+
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+/*
+ * ext4_autodefrag_write_begin() cleared BH_Mapped flag on buffers of a
+ * page, so that ext4_ext_map_blocks will be called, defrag, thus, can be
+ * triggered.
+ *
+ * This function is called by ext4_write_begin() and ext4_da_write_begin().
+ */
+static void ext4_autodefrag_write_begin(struct inode *inode, struct page *page)
+{
+	struct buffer_head *bh, *head;
+	if (!ext4_should_auto_defrag(inode))
+		return;
+
+	BUG_ON(!page_has_buffers(page));
+
+	bh = page_buffers(page);
+	head = bh;
+	do {
+		/*
+		 * make sure that get_block() is called even if the buffer is
+		 * mapped, but not if it is already marked with BH_Auto_defrag.
+		 */
+		if (!buffer_auto_defrag(bh) && buffer_mapped(bh))
+			clear_buffer_mapped(bh);
+		bh = bh->b_this_page;
+	} while (bh != head);
+}
+#endif
 static int ext4_get_block_write(struct inode *inode, sector_t iblock,
 		   struct buffer_head *bh_result, int create);
 static int ext4_write_begin(struct file *file, struct address_space *mapping,
@@ -2114,6 +2167,10 @@ retry:
 		ext4_snapshot_write_begin(inode, page, len, 0);
 #endif
 
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	ext4_autodefrag_write_begin(inode, page);
+#endif
+
 	if (ext4_should_dioread_nolock(inode))
 		ret = __block_write_begin(page, pos, len, ext4_get_block_write);
 	else
@@ -2158,6 +2215,7 @@ retry:
 
 	if (ret == -ENOSPC && ext4_should_retry_alloc(inode->i_sb, &retries))
 		goto retry;
+	
 out:
 	return ret;
 }
@@ -2730,6 +2788,9 @@ static void mpage_da_map_and_submit(struct mpage_da_data *mpd)
 	if ((mpd->b_size == 0) ||
 	    ((mpd->b_state  & (1 << BH_Mapped)) &&
 	     !(mpd->b_state & (1 << BH_Delay)) &&
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	     !(mpd->b_state & (1 << BH_Auto_Defrag)) &&
+#endif
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
 	     !(mpd->b_state & (1 << BH_Unwritten)) &&
 		 !(mpd->b_state & (1 << BH_Remap))))
@@ -2766,6 +2827,10 @@ static void mpage_da_map_and_submit(struct mpage_da_data *mpd)
 		get_blocks_flags |= EXT4_GET_BLOCKS_IO_CREATE_EXT;
 	if (mpd->b_state & (1 << BH_Delay))
 		get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE;
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (mpd->b_state & (1 << BH_Auto_Defrag))
+		get_blocks_flags |= EXT4_GET_BLOCKS_AUTO_DEFRAG;
+#endif
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
 	if (mpd->b_state & (1 << BH_Remap))
 		get_blocks_flags |= EXT4_GET_BLOCKS_MOVE_ON_WRITE |
@@ -2855,12 +2920,22 @@ submit_io:
 }
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+#define BH_FLAGS ((1 << BH_Uptodate) | (1 << BH_Mapped) | (1 << BH_Delay) | \
+		(1 << BH_Unwritten) | (1 << BH_Remap) | (1 << BH_Auto_Defrag))
+#else
 #define BH_FLAGS ((1 << BH_Uptodate) | (1 << BH_Mapped) | \
 		(1 << BH_Delay) | (1 << BH_Unwritten) | (1 << BH_Remap))
+#endif
+#else
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+#define BH_FLAGS ((1 << BH_Uptodate) | (1 << BH_Mapped) | \
+		(1 << BH_Delay) | (1 << BH_Unwritten) | (1 << BH_Auto_Defrag))
 #else
 #define BH_FLAGS ((1 << BH_Uptodate) | (1 << BH_Mapped) | \
 		(1 << BH_Delay) | (1 << BH_Unwritten))
 #endif
+#endif
 
 /*
  * mpage_add_bh_to_extent - try to add one more block to extent of blocks
@@ -2941,8 +3016,13 @@ flush_it:
 static int ext4_bh_delay_or_unwritten_or_remap(handle_t *handle,
 		struct buffer_head *bh)
 {
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	return ((buffer_delay(bh) || buffer_unwritten(bh)) &&
+		buffer_dirty(bh)) || buffer_remap(bh) || buffer_auto_defrag(bh);
+#else
 	return ((buffer_delay(bh) || buffer_unwritten(bh)) &&
 		buffer_dirty(bh)) || buffer_remap(bh);
+#endif
 }
 #else
 static int ext4_bh_delay_or_unwritten(handle_t *handle, struct buffer_head *bh)
@@ -3088,6 +3168,10 @@ static int ext4_da_get_block_prep(struct inode *inode, sector_t iblock,
 		flags |= EXT4_GET_BLOCKS_MOVE_ON_WRITE;
 
 #endif
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (ext4_should_auto_defrag(inode))
+		flags |= EXT4_GET_BLOCKS_AUTO_DEFRAG;
+#endif
 	/*
 	 * first, we need to know whether the block is allocated already
 	 * preallocated blocks are unmapped but should treated
@@ -3766,7 +3850,9 @@ retry:
 	if (EXT4_SNAPSHOTS(inode->i_sb))
 		ext4_snapshot_write_begin(inode, page, len, 1);
 #endif
-
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	ext4_autodefrag_write_begin(inode, page);
+#endif
 	ret = __block_write_begin(page, pos, len, ext4_da_get_block_prep);
 	if (ret < 0) {
 		unlock_page(page);
@@ -4230,6 +4316,10 @@ static int ext4_get_block_write(struct inode *inode, sector_t iblock,
 		   inode->i_ino, create);
 	if (ext4_snapshot_should_move_data(inode))
 		flags |= EXT4_GET_BLOCKS_MOVE_ON_WRITE;
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (ext4_should_auto_defrag(inode))
+		flags |= EXT4_GET_BLOCKS_AUTO_DEFRAG;
+#endif
 	return _ext4_get_block(inode, iblock, bh_result, flags);
 #else
 	ext4_debug("ext4_get_block_write: inode %lu, create flag %d\n",
