ext4: issue async reads on snapshot files

If a file is rewritten and goal blocks is taken by snapshot files,
then async reads on the blocks of the snapshot files are issued.
diff --git a/fs/ext4/auto_defrag.c b/fs/ext4/auto_defrag.c
index 37a88e4..05e1c25 100644
--- a/fs/ext4/auto_defrag.c
+++ b/fs/ext4/auto_defrag.c
@@ -54,10 +54,7 @@ static void ext4_map_page_buffers(struct page *page, ext4_fsblk_t pblk)
 	bh = page_buffers(page);
 	head = bh;
 	do {
-		if (unlikely(buffer_mapped(bh)))
-			BUG_ON(bh->b_blocknr != pblk);
-		else
-			map_bh(bh, inode->i_sb, pblk);
+		map_bh(bh, inode->i_sb, pblk);
 		pblk++;
 		bh = bh->b_this_page;
 	} while (bh != head);
@@ -69,7 +66,7 @@ static void ext4_map_page_buffers(struct page *page, ext4_fsblk_t pblk)
  * set_page_buffers_dirty() sets mapped buffers of
  * the @page dirty and uptodate.
  */
-static void set_page_buffers_dirty(struct page *page) {
+static void set_page_buffers_dirty_and_remap(struct page *page) {
 	struct buffer_head *bh;
 	struct buffer_head *head;
 
@@ -80,6 +77,7 @@ static void set_page_buffers_dirty(struct page *page) {
 	do {
 		if (buffer_mapped(bh)) {
 			set_buffer_uptodate(bh);
+			set_buffer_remap(bh);
 			mark_buffer_dirty(bh);
 		}
 		bh = bh->b_this_page;
@@ -100,7 +98,7 @@ static void ext4_read_and_dirty_end_io(struct bio *bio, int err) {
 		BUG_ON(bio_data_dir(bio) != READ);
 		if (uptodate) {
 			SetPageUptodate(page);
-			set_page_buffers_dirty(page);
+			set_page_buffers_dirty_and_remap(page);
 		} else {
 			ClearPageUptodate(page);
 			SetPageError(page);
@@ -321,7 +319,7 @@ confused:
 	if (!PageUptodate(page)) {
 		ext4_read_mapped_buffers_dirty(page);
 	} else {
-		set_page_buffers_dirty(page);
+		set_page_buffers_dirty_and_remap(page);
 		unlock_page(page);
 	}
 	goto out;
@@ -384,7 +382,7 @@ find_page:
 				continue;
 			}
 			ext4_map_page_buffers(page, pblk);
-			set_page_buffers_dirty(page);
+			set_page_buffers_dirty_and_remap(page);
 			unlock_page(page);
 			continue;
 		}
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 383838e..65398ea 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -209,11 +209,21 @@ struct ext4_allocation_request {
 #define EXT4_MAP_UNWRITTEN	(1 << BH_Unwritten)
 #define EXT4_MAP_BOUNDARY	(1 << BH_Boundary)
 #define EXT4_MAP_UNINIT		(1 << BH_Uninit)
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+#define EXT4_MAP_AUTO_DEFRAG		(1 << BH_Auto_Defrag)
+#endif
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
 #define EXT4_MAP_REMAP		(1 << BH_Remap)
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+#define EXT4_MAP_FLAGS		(EXT4_MAP_NEW | EXT4_MAP_MAPPED |\
+				 EXT4_MAP_UNWRITTEN | EXT4_MAP_BOUNDARY |\
+				 EXT4_MAP_UNINIT | EXT4_MAP_REMAP | \
+				 EXT4_MAP_AUTO_DEFRAG)
+#else
 #define EXT4_MAP_FLAGS		(EXT4_MAP_NEW | EXT4_MAP_MAPPED |\
 				 EXT4_MAP_UNWRITTEN | EXT4_MAP_BOUNDARY |\
 				 EXT4_MAP_UNINIT | EXT4_MAP_REMAP)
+#endif
 #else
 #define EXT4_MAP_FLAGS		(EXT4_MAP_NEW | EXT4_MAP_MAPPED |\
 				 EXT4_MAP_UNWRITTEN | EXT4_MAP_BOUNDARY |\
diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 2055ee6..9364399 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -3288,6 +3288,94 @@ free_blocks:
 }
 #endif
 
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+/*
+ * This function lookup if the goal blocks of the requested blocks
+ * belong to snapshot,  If so, async reads on the goal blocks are
+ * issued,
+ * @inode: inode to be defragged.
+ * @map:   map info
+ */
+int ext4_auto_defrag_begin(struct inode *inode,
+			    struct ext4_map_blocks *map,
+			    struct ext4_ext_path *path)
+{
+	struct ext4_allocation_request ar;
+	ext4_fsblk_t goal, blk;
+	struct ext4_extent_header *eh;
+	struct ext4_extent *ex;
+	int err = 0, depth;
+
+	if (path == NULL) {
+		path = ext4_ext_find_extent(inode, map->m_lblk, path);
+		if (IS_ERR(path)) {
+			err = PTR_ERR(path);
+			path = NULL;
+			goto out;
+		}
+	}
+
+	depth = ext_depth(inode);
+	eh = path[depth].p_hdr;
+	ex = path[depth].p_ext;
+	if (!ex)
+		return 0;
+
+	if (EXT_FIRST_EXTENT(eh) == ex) {
+		ext4_lblk_t ee_block;
+		ee_block = le32_to_cpu(ex->ee_block);
+		if (ee_block == 0)
+			return;
+		ext4_ext_drop_refs(path);
+		path = ext4_ext_find_extent(inode, ee_block - 1, path);
+		if (IS_ERR(path)) {
+			err = PTR_ERR(path);
+			path = NULL;
+			goto out;
+		}
+	} else
+		path[depth].p_ext -= 1;
+	
+
+	goal = ext4_ext_find_goal(inode, path, map->m_lblk);
+	if ((map->m_flags & EXT4_MAP_MAPPED) && (goal == map->m_pblk))
+		/* no need to */
+		goto out;
+
+	ar.lleft = map->m_lblk;
+	err = ext4_ext_search_left(inode, path, &ar.lleft, &ar.pleft);
+	if (err)
+		goto out;
+	ar.lright = map->m_lblk;
+	err = ext4_ext_search_right(inode, path, &ar.lright, &ar.pright);
+	if (err)
+		goto out;
+
+	ar.inode = inode;
+	ar.goal = goal;
+	ar.logical = map->m_lblk;
+	ar.len = map->m_len;
+	/*
+	 * TODO we can not use preallocations here
+	 */
+	ar.flags = EXT4_MB_HINT_DATA | EXT4_MB_HINT_GOAL_ONLY |
+		   EXT4_MB_HINT_PREALLOC | EXT4_MB_HINT_TRY_GOAL;
+
+	blk = ext4_mb_new_blocks(NULL, &ar, &err);
+	if (blk > 0) {
+		map->m_flags |= EXT4_MAP_AUTO_DEFRAG;
+		goto out;
+	}
+
+	goal = ext4_auto_defrag_async_read_blocks(inode, goal, map->m_len);
+	if (goal > 0)
+		map->m_flags |= EXT4_MAP_AUTO_DEFRAG;
+
+out:
+	return err;
+}
+#endif
+
 /*
  * Block allocation/map/preallocation routine for extents based files
  *
@@ -3657,7 +3745,15 @@ out:
 	map->m_flags |= EXT4_MAP_MAPPED;
 	map->m_pblk = newblock;
 	map->m_len = allocated;
+
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (!(flags & EXT4_GET_BLOCKS_CREATE) &&
+	    (flags & EXT4_GET_BLOCKS_AUTO_DEFRAG))
+		ext4_auto_defrag_begin(inode, map, path);
+#endif
+
 out2:
+
 	if (path) {
 		ext4_ext_drop_refs(path);
 		kfree(path);
