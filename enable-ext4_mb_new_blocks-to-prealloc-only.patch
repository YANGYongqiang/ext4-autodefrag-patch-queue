ext4: enable ext4_mb_new_blocks() to preallocate blocks only

Current ext4_mb_new_blocks() allocates blocks and adds surplus blocks
to preallocation, but it can not adds all blocks to praellocation.

Patched ext4_mb_new_blocks can adds all blocks to preallocation.
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 17408433..383838e 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -171,6 +171,10 @@ typedef unsigned int ext4_group_t;
 /* allocate blocks for active snapshot */
 #define EXT4_MB_HINT_COWING		0x02000
 #endif
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+#define EXT4_MB_HINT_PREALLOC		0x04000
+#define EXT4_MB_HINT_AUTO_DEFRAG	0x08000
+#endif
 
 struct ext4_allocation_request {
 	/* target inode for block we're allocating */
diff --git a/fs/ext4/mballoc.c b/fs/ext4/mballoc.c
index e71ef6c..7100076 100644
--- a/fs/ext4/mballoc.c
+++ b/fs/ext4/mballoc.c
@@ -3116,6 +3116,9 @@ static void ext4_discard_allocated_blocks(struct ext4_allocation_context *ac)
 	if (pa && pa->pa_type == MB_INODE_PA) {
 		len = ac->ac_b_ex.fe_len;
 		pa->pa_free += len;
+		printk("discard inode pa %p: %llu/%u for %u\n", pa,
+			pa->pa_pstart, pa->pa_len, pa->pa_lstart);
+
 	}
 
 }
@@ -3513,6 +3516,9 @@ ext4_mb_new_inode_pa(struct ext4_allocation_context *ac)
 
 	mb_debug(1, "new inode pa %p: %llu/%u for %u\n", pa,
 			pa->pa_pstart, pa->pa_len, pa->pa_lstart);
+	printk("new inode pa %p: %llu/%u for %u\n", pa,
+			pa->pa_pstart, pa->pa_len, pa->pa_lstart);
+
 	trace_ext4_mb_new_inode_pa(ac, pa);
 
 	ext4_mb_use_inode_pa(ac, pa);
@@ -4320,6 +4326,17 @@ ext4_fsblk_t ext4_mb_new_blocks(handle_t *handle,
 			goto nofail;
 		}
 #endif
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+		if (unlikely(ar->flags & EXT4_MB_HINT_PREALLOC))
+			goto noquota;
+
+		if (unlikely(ar->flags & EXT4_MB_HINT_AUTO_DEFRAG)) {
+			/* don't fail when allocating blocks for prealloc */
+			dquot_alloc_block_nofail(ar->inode, ar->len);
+			goto nofail;
+		}
+#endif
+
 		while (ar->len && dquot_alloc_block(ar->inode, ar->len)) {
 			ar->flags |= EXT4_MB_HINT_NOPREALLOC;
 			ar->len--;
@@ -4328,6 +4345,9 @@ ext4_fsblk_t ext4_mb_new_blocks(handle_t *handle,
 nofail:
 #endif
 		inquota = ar->len;
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+noquota:
+#endif
 		if (ar->len == 0) {
 			*errp = -EDQUOT;
 			goto out;
@@ -4357,6 +4377,11 @@ repeat:
 		if (*errp)
 			goto errout;
 
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+		if (unlikely(ar->flags & EXT4_MB_HINT_PREALLOC))
+			ac->ac_o_ex.fe_len = 0;
+#endif
+
 		/* as we've just preallocated more space than
 		 * user requested orinally, we store allocated
 		 * space in a special descriptor */
@@ -4364,6 +4389,18 @@ repeat:
 				ac->ac_o_ex.fe_len < ac->ac_b_ex.fe_len)
 			ext4_mb_new_preallocation(ac);
 	}
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (ar->flags & EXT4_MB_HINT_PREALLOC) {
+		/* Just allocate to prealloc space */
+		ext4_discard_allocated_blocks(ac);
+		if (ac->ac_status == AC_STATUS_FOUND) {
+			block = ext4_grp_offs_to_block(sb, &ac->ac_b_ex);
+			ar->len = ac->ac_b_ex.fe_len;
+		}
+		ext4_mb_release_context(ac);
+		goto out;
+	}
+#endif
 	if (likely(ac->ac_status == AC_STATUS_FOUND)) {
 		*errp = ext4_mb_mark_diskspace_used(ac, handle, reserv_blks);
 		if (*errp == -EAGAIN) {
