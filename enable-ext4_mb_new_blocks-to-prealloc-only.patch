ext4: enable ext4_mb_new_blocks() to preallocate blocks only

Current ext4_mb_new_blocks() allocates blocks and adds surplus blocks
to preallocation, but it can not adds all blocks to praellocation.

Patched ext4_mb_new_blocks can adds all blocks to preallocation.
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 17408433..6f91875 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -171,6 +171,9 @@ typedef unsigned int ext4_group_t;
 /* allocate blocks for active snapshot */
 #define EXT4_MB_HINT_COWING		0x02000
 #endif
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+#define EXT4_MB_HINT_PREALLOC		0x04000
+#endif
 
 struct ext4_allocation_request {
 	/* target inode for block we're allocating */
diff --git a/fs/ext4/mballoc.c b/fs/ext4/mballoc.c
index e71ef6c..efb2b29 100644
--- a/fs/ext4/mballoc.c
+++ b/fs/ext4/mballoc.c
@@ -4348,7 +4348,12 @@ nofail:
 	}
 
 	ac->ac_op = EXT4_MB_HISTORY_PREALLOC;
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if ((ar->flags & EXT4_MB_HINT_PREALLOC) ||
+	    !ext4_mb_use_preallocated(ac)) {
+#else
 	if (!ext4_mb_use_preallocated(ac)) {
+#endif
 		ac->ac_op = EXT4_MB_HISTORY_ALLOC;
 		ext4_mb_normalize_request(ac, ar);
 repeat:
@@ -4357,6 +4362,11 @@ repeat:
 		if (*errp)
 			goto errout;
 
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+		if (ar->flags & EXT4_MB_HINT_PREALLOC)
+			/* Request preallocation */
+			ac->ac_o_ex.fe_len = 0;
+#endif
 		/* as we've just preallocated more space than
 		 * user requested orinally, we store allocated
 		 * space in a special descriptor */
@@ -4364,6 +4374,16 @@ repeat:
 				ac->ac_o_ex.fe_len < ac->ac_b_ex.fe_len)
 			ext4_mb_new_preallocation(ac);
 	}
+#ifdef CONFIG_EXT4_FS_AUTO_DEFRAG
+	if (ar->flags & EXT4_MB_HINT_PREALLOC) {
+		if (ac->ac_status == AC_STATUS_FOUND) {
+			block = ext4_grp_offs_to_block(sb, &ac->ac_b_ex);
+			ar->len = ac->ac_b_ex.fe_len;
+		}
+		ext4_mb_release_context(ac);
+		goto out;
+	}
+#endif
 	if (likely(ac->ac_status == AC_STATUS_FOUND)) {
 		*errp = ext4_mb_mark_diskspace_used(ac, handle, reserv_blks);
 		if (*errp == -EAGAIN) {
